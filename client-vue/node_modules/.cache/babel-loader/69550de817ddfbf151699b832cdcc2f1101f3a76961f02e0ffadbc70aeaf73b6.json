{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"about\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"This is a product edit page\", -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["C:\\Users\\Gaming\\OneDrive\\Bureau\\Cégep\\Session 5\\Programmation avancée\\tp3_v1\\client\\src\\views\\ProductEditView.vue"],"sourcesContent":["<template>\r\n  <div class=\"about\">\r\n    <h1>This is a product edit page</h1>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import ProductDataService from '@/services/ProductDataService'\r\n    export default {\r\n        props: ['removeInventory', 'inventory', 'remove', 'updateInventory'],\r\n        data () {\r\n            return {\r\n                message: null, \r\n                submitted: false, \r\n                product: {},\r\n                id: parseInt(this.$route.params.id)\r\n            }\r\n        },\r\n        methods: {\r\n            updateProduct () {\r\n                ProductDataService.update(this.id, this.product)\r\n                .then(response => {\r\n                    this.updateInventory(this.productIndex, this.product)\r\n                    this.submitted = true\r\n                    this.message = response.data.message\r\n                })\r\n            },\r\n            deleteProduct () {\r\n                ProductDataService.delete(this.id)\r\n                    .then(response => {\r\n                        this.removeInventory(this.productIndex)\r\n                        this.remove(this.product.name)\r\n                        this.$router.push({ name: 'home' })\r\n                    })\r\n            }\r\n        },\r\n        computed: {\r\n            productIndex () {\r\n                const index = this.inventory.findIndex((p) => {\r\n                    return p.id === this.id\r\n                })\r\n                return index \r\n            }\r\n        },\r\n        mounted () {\r\n            ProductDataService.get(this.id)\r\n                .then(response => {\r\n                    this.product = response.data\r\n                })\r\n        }\r\n    }\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAO;gCAChBC,mBAAA,CAAoC,YAAhC,6BAA2B;oBAA/BC,UAAoC,C;;uBADtCC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}